# @(#) a simple woodchips simulation
# @(#) we have a world, and ants that have
# @(#) simple rules: wander until you see a woodchip
# @(#) - if you have a woodchip, put down your woodchip
# @(#) - if you don't have a woodchip, pick that one up
#
#
# This also raises that I need to *finally* do certain things
# - foreach and array fusion
# - figure out a memory model so that `ref` isn't required
# (basically, allow the compiler to figure out when we want a ref,
# unless we *say explicitly* that we want a ref)
# - get make, make-array, make-string, &c. working
# - Just generally make things more functional, less imperative
# - figure out if I'm really going to keep types and records
# (having both seems redundant, and we could have a smaller language...)
# - VLAs need to add a $NAME_len param to lambdas
# - need to fix `for` loop as well as `foreach` and co
# - Fix `void` detection for adding a `return` in C

record SimMatrix {
    x:int
    y:int
    length:int
    data:ref[char]
}

record Ant {
    x:int
    y:int
    carrying:bool
    direction:int # which "direction" (cardinal) is the ant facing?
}

def make_SimMatrix x:int y:int => ref[SimMatrix] = {
    var ret:ref[SimMatrix] = (hmalloc $ sizeof SimMatrix)
    val total:int = (* x y)
    set! ret->x x
    set! ret->y y
    set! ret->length total
    set! ret->data $ hmalloc $ * total $ sizeof char
    ret
}

def make_Ant max_x:int max_y:int => ref[Ant] = {
    var ret:ref[Ant] = (hmalloc $ sizeof Ant)
    var rndx:int = (arc4random_uniform max_x)
    var rndy:int = (arc4random_uniform max_y)
    set! ret->x rndx
    set! ret->y rndy
    set! ret->direction $ arc4random_uniform 4
    ret
}

# I *really* need to work on inlining...
# helper methods like this could be easily inlined
def get_SimMatrix x:int y:int mat:ref[SimMatrix] => char = {
    # XXX (lojikil):
    # this actually raises an interesting problem
    # when you say (-> mat x) do you mean the *NAME* x
    # or the scoped variable x? There almost has to be 
    # distinction of forms that operate on variables and
    # those that operate on the values those variables 
    # hold
    # XXX (lojikil):
    # when I was originally designing things, I was heading
    # towards a SRFI-9/SRFI-57/Haskell style system wherein
    # Records have named accessors, like types do. Then those
    # a rewritten to C. Right now, I'll use C-style accessors
    # similar to OCaml, but I do like the named accessor style
    # better. Why? Because it can be treated like a function
    # that is rewritten to a low-level accessor based on the
    # typing decisions made by the compiler. This also supports
    # making `type` and `record` close to equivalent, since there's
    # no *real* need to have a distinction there; a record could
    # just be a type with no other variants.

    var offset:int = (* x y)
    when (<= mat->length offset) do {
        set! offset $ - offset mat->length
    }
    get mat->data offset
}

def set_SimMatrix x:int y:int mat:ref[SimMatrix] value:char = {
    var offset:int = (* x y)
    when (<= mat->length offset) do {
        set! offset $ - offset mat->length
    }
    set! (get mat->data offset) value
}

def calc_offset x:int y:int mat:ref[SimMatrix] => int = {
    var offset:int = (* x y)
    when (<= mat->length offset) do (set! offset $ - offset mat->length)
    offset
}

# XXX (lojikil) I do need to fix detection of
# `return` in functions that are void and such
# also, make it so that you can call something
# that technically returns (like printf) but ignore
# that return. I dislike `let () = (printf ...)`
# but maybe that isn't a terrible idea either...
def print_SimMatrix mat:ref[SimMatrix] = {
    var idx:int = 0
    while (< idx mat->length) do {
        when (&& (eq? 0 $ % idx mat->x) (!= idx 0)) do {
            printf "\n"
        }
        printf "%d " $ get mat->data idx
        set! idx $ + idx 1
    }
    printf "\n"
}

def construct_board mat:ref[SimMatrix] = {
    # NOTE we don't want more than 30% of the board
    # to be woodchips
    val upperbound:int = (/ mat->length 3)
    val totalchipcount:int = (arc4random_uniform upperbound)
    var idx:int = 0
    var chipcount:int = 0
    printf "woodchip count: %d\n" totalchipcount
    while (< idx mat->length) do {
        when (&& (< chipcount totalchipcount) (>= 20 $ arc4random_uniform 100)) do {
            # if we haven't exceeded the 30% of the board being woodchips and our
            # guess exceeds some threshold, set a woodchip here
            set! (get mat->data idx) 2
            set! chipcount $ + chipcount 1
        }
        set! idx $ + idx 1
    }
}

def place_ant ant:ref[Ant] mat:ref[SimMatrix] = {
    var offset:int = (* ant->x ant->y)
    val total:int = mat->length
    var value:char = 0
    var res:char = 0
    when (> offset total) do {
        set! offset $ - offset total
    }
    set! value $ get mat->data offset
    match value with
        0 => (set! res 1)
        1 => (set! res 1) # can there be two ants?
        2 => (set! res 4)
        3 => (set! res 3) # can there be two ants?
        4 => (set! res 4)
    end
    set! (get mat->data offset) res
}

def check_woodchip ant:ref[Ant] mat:ref[SimMatrix] = {

}

def move_ant ant:ref[Ant] mat:ref[SimMatrix] = {

}

# TODO (lojikil): I need to get VLAs working as expeted, so that
# we don't have to pass in an explicit length parameter. For now,
# let's just simulate with *one* ant
def run_simulation ant:ref[Ant] mat:ref[SimMatrix] rnds:int = {
    var cnt:int = 0
    var idx:int = 0
    while (< cnt rnds) do {
        check_woodchip ant mat
        move_ant ant mat
        set! cnt $ + cnt 1
    }
}

# we can encode state:
# 0 - nothing here
# 1 - an ant here
# 2 - a woodchip
# 3 - an ant carrying a woodchip
# 4 - an ant *and* a woodchip (the and just set it down)
# the tough part is, what direction is that ant heading?
# the update process for each ant's movement could determine the
# direction the ant is moving prior to "looking" for woodchips
# ants can only pick up woodchips in the direction they can "see"
# which is forwards
#
# eventually it would be fun to make this into a "turtles" library
# so that folks can do some simple simulations in carML too, esp
# since carML also uses my work on tatwyd (a PowerLogo-alike)

def main ac:int al:ref[string] => int = {
    (GC_INIT)
    var mat:ref[SimMatrix] = (make_SimMatrix 10 10)
    var ant:ref[Ant] = (make_Ant 10 10)
    printf "x: %d\n" mat->x
    printf "y: %d\n" mat->y
    printf "length: %d\n" mat->length
    print_SimMatrix mat
    construct_board mat
    place_ant ant mat
    print_SimMatrix mat
    0
}
