#@(#) a simple let/let-rec rewriter
#@(#) rewrite let/let-rec ASTs to 
#@(#) simple val nodes

record NameMap {
    len : int
    names : array[string]
    vals : array[string]
}

# specializing Option here
# myself, because carML's 
# allocation strategy hasn't
# *really* been decided yet...
type OptionString {
    SomeString string
    NoString
}

def fresh_name src:string => string = {
    val len : int = (+ 10 $ strlen src) 
    var f : string = (make-string ' ' len)
    
    snprintf f "%s%d" len src $ arc4random 
    f
}

def find_name name:string rewrites:ref[NameMap] => ref[OptionString] = {
    var idx : int = 0

    while (< idx (-> rewrites len)) do {
        when (not $ strcmp (get (-> rewrites names) idx) name) do {
            return (OptionString_SomeString_ref $ get (-> rewrites vals) idx)
        }
        set! idx $ + idx 1
    }

    (OptionString_NoString_ref)
}

def rewrite_names head:ref[AST] rewrites:NameMap => ref[AST] = {
    val v:int = (-> head tag)
    match v with
        # dying with tags here...
        TIDENT => 10
        else => 11
    }
}

def let_to_val head:ref[AST] rewrites:NameMap => ref[AST] = {
    nil
}
