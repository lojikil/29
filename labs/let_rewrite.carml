#@(#) a simple let/let-rec rewriter
#@(#) rewrite let/let-rec ASTs to 
#@(#) simple val nodes

record NameMap {
    len : int # length of names/vals
    offset : int # current offset into names/vals
    names : ref[array[string]]
    vals : ref[array[string]]
}

# specializing Option here
# myself, because carML's 
# allocation strategy hasn't
# *really* been decided yet...
type OptionString {
    SomeString string
    NoString
}

def add_rewrite name:string new_name:string rewrites:ref[NameMap] => bool = {
    val len : int = (-> rewrites len)
    val off : int = (-> rewrites offset)

    when (< off len) do {
        set! (get (-> rewrites names) off) name
        set! (get (-> rewrites vals) off) new_name
        set! (-> ret off) $ + off 1
        return true
    }

    false
}

def init_rewrite => ref[NamedMap] = {
    var ret : ref[NamedMap] = (hmalloc $ sizeof NamedMap)
    val len : int = 64
    # again, this could be so much nicer if
    # we had decent constructors *or* a monadic
    # interface to construction...
    set! (-> ret len) len
    set! (-> ret offset) 0
    # would be interesting to have a "new" semantic for this stuff...
    set! (-> ret names) $ hmalloc $ mul len $ sizeof ref[array[string]]
    set! (-> ret vals) $ hmalloc $ mul len $ sizeof ref[array[string]]
    ret
}

def fresh_name src:string => string = {
    val len : int = (+ 10 $ strlen src) 
    var f : string = (hmalloc $ mul len $ sizeof char)
    snprintf f "%s%d" len src $ arc4random 
    f
}

def find_name name:string rewrites:ref[NameMap] => ref[OptionString] = {
    var idx : int = 0

    while (< idx (-> rewrites len)) do {
        when (not $ strcmp (get (-> rewrites names) idx) name) do {
            return (OptionString_SomeString_ref $ get (-> rewrites vals) idx)
        }
        set! idx $ + idx 1
    }

    (OptionString_NoString_ref)
}

def rewrite_names head:ref[AST] rewrites:NameMap => ref[AST] = {
    val v : int = (-> head tag)
    var idx : int = 0
    var name : ref[OptionString] = (SomeString_NoString_ref)
    match v with
        TIDENT => {
            set! name $ find_name (-> head value) rewrites
            # XXX: I'm unpacking a tag because the compiler
            # can't yet handle this as call + Binding
            match (-> name tag) with
                OptionString_Tag_SOMESTRING => (make_ident $ -> name m_1)
                else => head
            end
        }
        else => {
            while (< idx $ -> head lenchildren) do {
                # need to copy each node in the AST to
                # the return list
                set! idx $ + idx 1
            }
        }
    end
}

def let_ident_name head:ref[AST] => ref[OptionString] = {
    val tag : int = (-> head tag)
    match tag with
        TLET => (OptionString_SomeString_ref $ get (-> head children) 0) #XXX: I hate how this reads...
        else => (NoString)
    end
}

def let_ident_value head:ref[AST] => ref[AST] =
    val tag : int = (-> head tag)
    match tag with
        TLET => (get (-> head children) 1) #XXX: I hate how this reads...
        else => nil
    end
}

def make_val name:string value:ref[AST] => ref[AST] = {
    # this would be so much nicer with a monadic interface
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret tag) TVAL
    set! (-> ret lenchildren) 2
    set! (-> ret children) $ hmalloc $ mul 2 $ sizeof AST
    set! (get (-> ref children) 0) name
    set! (get (-> ref children) 1) value
    ret
}

def make_ident name:string => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret tag) TIDENT
    set! (-> ret lenchildren) 0
    set! (-> ret value) name
    ret
}

def make_begin_pair binding:ref[AST] body:ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret tag) TBEGIN
    match (-> body tag) with
        TBEGIN => {
            val len : int = (+ 1 $ -> body lenchildren)
            var idx : int = 0
            set! (-> ret lenchildren) len
            set! (-> ret children) $ hmalloc $ mul len $ sizeof AST
            # another situation where foreach would be
            # perfect for...
            while (< idx len) do {
                set! (get (-> ret children) idx) (get (-> body children) idx)
                set! idx $ + idx 1
            }
        }
        else => {
            set! (-> ret lenchildren) 2
            set! (-> ret children) $ hmalloc $ mul 2 $ sizeof AST
            set! (get (-> ret children) 0) binding
            set! (get (-> ret children) 1) body
        }
    end
    ret
}

def let_to_val head:ref[AST] rewrites:NameMap => ref[AST] = {
    # the code here is very imperative... getting some handle
    # on for/foreach/map/reduce/filter/take vis-a-vis Deques
    # and the like will be hugely important for fixing the
    # readability here
    var ret : ref[AST] = nil
    var new_binding : ref[AST] = nil
    var new_body : ref[AST] = nil
    var idx : int = 0
    var new_name : string = nil
    match (-> head tag) with
        # matching multiple cases with | would
        # be nice...
        # so would destructuring binds
        TLET => {
            set! new_name $ fresh_name $ let_ident_name head
            # we technically need to do rewrites for here as well..
            set! new_binding $ new_val new_name $ let_ident_value head rewrites
            # we add this last because the name may shadow another name
            # elsewhere...
            add_rewrite (let_ident_name head) new_name rewrites
            set! new_body $ rewrite_names head rewrites
            make_begin_pair new_binding new_body
        }
        else => {
            # thinking that we could iterate over each
            # child and see if it is a TLET
            head
        }
    end
}

# it would be interesting to have some nano-pass
# signature for these sorts of things that made
# these sorts of optimizations easy to handle
# maybe something like this?
def nanopass_let head:ref[AST] => ref[AST] = {
    nil
}
