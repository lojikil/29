# @(#) a match rewriter
# @(#) recreating the AST type from carML/c here
# @(#) as a carML record. Were I to clean-room
# @(#) this properly, I'd obviously use variants.
# @(#) However, this at least allows me to test
# @(#) a rewriter without having to link the 
# @(#) entire carML/c code base here...

record AST {
    tag:U32 # FIXME: need to define C-level types...
    value: string
    children:array[ref[AST]] # FIXME need to fix self-referential records...
    lenvalue: U32
    lenchildren: U32
}

def make_AST tag:int lenchildren:int children:array[ref[AST]] lenvalue:int value:string => ref[AST] = {
    var res:ref[AST] = (malloc $ sizeof AST)
    set! (-> res tag) tag
    set! (-> res lenchildren) lenchildren
    set! (-> res children) children
    if (<> value NULL) then
        (set! (-> res value) $ strdup value)
    else
        (set! (-> res value) NULL)
    set! (-> res lenvalue) lenvalue
    res
}


# make a specific type of AST, specifically a
# ident node.
def make_ident_AST name:string => ref[AST] = (make_AST 0 0 NULL (strlen name) name)

def make_integer_AST value:string => ref[AST] = (make_AST 1 0 NULL (strlen value) value)

def make_call_AST children:array[ref[AST]] len:int => ref[AST] = (make_AST 2 len children 0 NULL)

def make_begin_AST children:array[ref[AST]] len:int => ref[AST] = (make_AST 3 len children 0 NULL)

# make a shallow copy of an AST
def copy_AST src:ref[AST] => ref[AST] = {
    (make_AST
        (-> src tag)
        (-> src lenchildren)
        (-> src children)
        (-> src lenvalue)
        (-> src value))
}

# we could just gather names and return a list...
def gather_names head:ref[AST] => array[ref[AST]] = {
    val len : int = (-> head lenchildren)
    val ret : array[ref[AST]] = (hmalloc $ * len $ sizeof ref[AST])
    var idx : int = 1
    var cur : ref[AST] = NULL

    # again, foreach would be perfect here...
    # actually just a map...
    # and really, could do a list of tuple[ref[AST], int]
    # or the like...
    while (< idx len) do {
        set! cur $ get (-> head children) idx
        when (eq? (-> cur tag) TIDENT) do {
            if (not $ eq? (-> cur value) "_") then {
                set! (get ret idx) cur
            } else {
                set! (get ret idx) NULL
            }
        }
        set! idx $ + idx 1
    }
    return ret
}

# there should only be minimal amount of nodes to
# iterate over, since we'll mainly be using this
# in `given` forms and match-case bodies, but this
# still means we're iterating over all forms to check
# for a rewrite case N^2 or N^3 (if there's both a given
# case guard *AND* a body)
def need_rewritep name:ref[AST] dst:ref[AST] => bool = {
    # should combine these two...
    when (eq? (-> name tag) (-> dst tag)) do {
        when (not (strcmp (-> name value) (-> dst value))) do {
            return true
        }
    }

    when (> (-> dst lenchildren) 0) do {
        var idx:int = 0
        var rst:bool = false
        while (< idx (-> dst lenchildren)) do {
            set! rst $ need_rewritep name $ get (-> dst children) idx
            when rst do {
                return true
            }
            set! idx $ + idx 1
        }
    }

    return false
}

def rewrite_AST name:ref[AST] dst:ref[AST] => ref[AST] = {
    NULL
}

# walk an AST, freeing anything that
# we've allocated with `malloc(3)` and
# friends ("malloc(3) and friends": worst. children's show. ever)
def free_AST head:ref[AST] = {
    var idx : int = 0
    when (<> NULL $ -> head value) do {
        free $ -> head value
    }

    when (<> 0 $ -> head lenchildren) do {
        # HAAAAAAAAATE while loops like this
        # should be a `for` loop, but i haven't
        # added support for compiling those yet
        while (< idx $ -> head lenchildren) do {
            free_AST $ get (-> head children) idx
            set! idx $ + idx 1 # probably should just have an inc! form
        }

        free $ -> head children
    }

    free head
}

# just for testing, add a main here
# use that for running this whole test...
# would be nice to have some sort of 
# conditional compilation language, ala
# SRFI-0

def main ac:int al:array[string] => int = {
    val test:ref[AST] = (make_ident_AST "test")
    val newtest:ref[AST] = (copy_AST test)
    val fun:ref[AST] = (make_ident_AST "+")
    val tmp0:array[ref[AST]] = [fun (make_integer_AST 10) test]
    val test0:ref[AST] = (make_call_AST tmp0 3)
    val tmp1:array[ref[AST]] = [test0 test]
    val test1:ref[AST] = (make_begin_AST tmp1 2)

    # would be nice to make this printf (if...) but the compiler
    # would probably generate terrible C for that rn... need to add
    # something to detect that
    if (<> test newtest) then (printf "they differ!\n") else (printf "wait... what?")

    # clean up our legos
    free_AST test
    free_AST newtest

    0
}
