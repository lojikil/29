# this file represents what c29 is _currently_ able to compile

# `declare` needn't be written right next to the 
# value being declared about... 
# I also like `@` as shorthand for `declare`...
# 
# declare blah Num -> Num
# def blah x = (sum x x)
#
# @blaz Num -> Num
# def blaz x = (sum x x)
# 
# Further thoughts:
# - function parameters? @blah Num (Num -> Num) -> Num
# - type variables? @blah Num vec of 'a -> 'a

# declare foo Num -> Num
def foo x = (sum x x)

# declare bar Num Num Num -> Num
def bar x y z = begin
    println x;
    println y;
    println z;
    sum (sum x y) z;
end

# same as the above, but with
# implicit call termination via
# newlines
# declare blah Num Num Num -> Num
def blah x y z = begin
    println x
    println y
    println z
    sum (sum x y) z 
end

# same as the above, but with
# {} instead of begin/end
# declare blaz Num Num Num -> Num
def blaz x y z = {
    println x
    println y
    println z
    sum (sum x y) z
}

#declare baz int int int -> int
def baz x y z = if (>= x y) then z else x

#declare baz bool any -> unit
def bar0 x y = when x do y

# constant
def x = 32

val foo = "simple string for doc note?"

let refc = 340 in (sum refc refc)

# nested let
let x = 54 in
let y = 67 in
let z = 75 in (sum x (sum y z))

# simple `letrec` example
# this is _not_ being parsed correctly...
# ok, there cannot be a TNEWL after the 
# TIN, and it must be wrapped in a TCALL...
# parsing is hard, let's go shopping!
# `letrec loop x = {...} in ...` syntactic
# sugar will go a long way here... 
letrec loop = fn x = {
    println x
    if (< x 10) then (loop (sum x 1)) else ()
} in (loop 0)

# lambda definition of a value...
val yar = fn x = (sum x 32)

# simple record definition
record Foo {
    blah : int
    bar : int
    baz
}

val xx : int = 45

# typed vectors:
val yy : array of int = [1,2,3,4,5]
val zz : array of array of int = [[1,2], [3,4]]

# should have the same type as the first:
val zz = [1,2,3,4,5]

# commas are optional in arrays
val jj = [1 2 3 4 5]
