# This is a collection of little programs/functions
# that are directly translated from BitC. carML, like
# cML before it, is pretty heavily influenced by BitC,
# so I naturally wanted to see translations
# could almost be @fact Num of a => a
@fact int => int
def fact x =
    if (< x 0) then (fact (abs x))
    else if (num= x 0) then 1
    else (mul x (fact (sub x 1)))

@fact0 int => int
def fact0 x =
    match x with
        # hmm... how does this work elsewhere? I like it tho...
        case x, < x 0 => fact $ abs x
        case 0 => 1
        else => mul x $ fact $ sub x 1
    end

# for more info on BitC see:
# https://web.archive.org/web/20130815183427/http://www.bitc-lang.org/docs/bitc/spec.html
