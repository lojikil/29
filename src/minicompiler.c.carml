#@(#) a miniature compiler for carML, written in carML
#@(#) meant to get us over the hump and actually be able
#@(#) to do simple things like check if a function was
#@(#) defined when producing code, and a nicer REPL
#@(#) this also should allow us to do other nicer
#@(#) things in the compiler, like dump bindings for
#@(#) all defined functions; note, this is called
#@(#) a mini-compiler to differentiate it from the
#@(#) full compiler. The delineation there is that
#@(#) this one still relies on what I originally wrote
#@(#) in C itself, whereas the full compiler will not
#@(#) be reliant upon that. As well, the fully compiler
#@(#) will have a properly typed AST, rather than the
#@(#) current array[ref[AST]]-typed one

# build a spaghetti stack of environment frames
# this would be nicer if we had two things:
#
# . vecdeques
# . tries
#
# if we had the first, we wouldn't need to track
# anything more about the object other than the
# vector, and if we had the second we could do
# faster lookups; currently we will have to iterate
# over the entire memberlist to find a match

record EnvFrame {
    curobj:int
    curmod:int
    lenobjs:int
    lenmods:int
    object_names:array[string]
    object_vals:array[ref[AST]]
    module_names:array[string]
    module_vals:array[ref[AST]]
}

# add an environment frame to the spaghetti stack
def new-env-frame src:ref[EnvFrame] => ref[EnvFrame] = {
    var ret:ref[EnvFrame] = (hmalloc $ sizeof EnvFrame)
    set! (-> ret parent) src
    ret
}

# add an AST to the correct place
def add-member! src:ref[AST] dst:ref[EnvFrame] => bool = {
    # I *reallllllllly* want accessors...
    val tag : int = (-> src tag)
    # also, I reaaaaaaally need to fix that `match` function
    # call bug
    # additionally, it will be really nice to get rid of some
    # of this imperative code here... a nice monadic interface
    # for these would work too...
    # lastly, a nice vector dequeue implementation would elide
    # a lot of the detail that I'm manually doing in here...
    match tag with
        TMODULE => {
            # we also need to handle the case when the length is
            # at capacity, and need to update that...
            when (eq? (-> dst curmod) (-> dst lenmods)) do {
                return false
            }
            set! (get (-> dst module_vals) (-> dst curmod)) src
            set! (get (-> dst module_names) (-> dst curmod)) (-> src value)
            set! (-> dst curmod) $ + 1 $ -> dst curmod
        }
        else => {
            # we also need to handle the case when the length is
            # at capacity, and need to update that...
            when (eq? (-> dst curobj) (-> dst lenmods)) do {
                return false
            }
            set! (get (-> dst object_vals) (-> dst curobj)) src
            set! (get (-> dst object_names) (-> dst curobj)) (-> src value)
            set! (-> dst curobj) $ + 1 $ -> dst curobj
        }
    end
    true
}

def dump-frame src:ref[EnvFrame] = {
    when (eq? src NULL) do (return)

    
}
