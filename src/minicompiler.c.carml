#@(#) a miniature compiler for carML, written in carML
#@(#) meant to get us over the hump and actually be able
#@(#) to do simple things like check if a function was
#@(#) defined when producing code, and a nicer REPL
#@(#) this also should allow us to do other nicer
#@(#) things in the compiler, like dump bindings for
#@(#) all defined functions

# build a spaghetti stack of environment frames
# this would be nicer if we had two things:
#
# . vecdeques
# . tries
#
# if we had the first, we wouldn't need to track
# anything more about the object other than the
# vector, and if we had the second we could do
# faster lookups; currently we will have to iterate
# over the entire memberlist to find a match

record EnvFrame {
    curfunc : int
    lenfuncs : int
    funcs : array[ref[AST]]
    curval : int
    lenvals : int
    vals : array[ref[AST]]
    curvar : int
    lenvars : int
    vars : array[ref[AST]]
    currec : int
    lenrecs : int
    recs : array[ref[AST]]
    curtype : int
    lentypes: int
    types: array[ref[AST]]
    curdec : int
    lendecs: int
    decls: array[ref[AST]]
    curmod : int
    lenmods: int
    mods: array[ref[AST]]
    parent: ref[EnvFrame]
}

# add an environment frame to the spaghetti stack
def new-env-frame src:ref[EnvFrame] => ref[EnvFrame] = {

}

# add an AST to the correct place
def add-member! src:ref[AST] dst:ref[EnvFrame] => bool = {
    # I *reallllllllly* want accessors...
    val tag : int = (-> src tag)
    # also, I reaaaaaaally need to fix that `match` function
    # call bug
    match tag with
        TMODULE => 1
        TDEF => 1
        TVAL => 1
        TVAR => 1
        TTYPE => 1
        TPOLY => 1
        TDECLARE => 1
        else => 0
    end
}

# check if a function is defined either as our curent functions
# or as our current declarations
def function-defined? src:ref[AST] env:ref[EnvFrame] => bool = {

}

# should start with a simple type checker, to make sure we're
# roughly not violating type guarantees
def type-check src:ref[AST] env:ref[EnvFrame] => bool = {

}

# make sure that a set (`set!` or `:=`) isn't breaking const guarantees
def const-check src:ref[AST] env:ref[EnvFrame] => bool = {

}

# a miniature compiler; basically just collects things together
# and stores them, but makes sure we have resolved all references
#
# for example, if we reference a variable `bar` in function `foo`,
# minicompile will warn if `bar` hasn't been defined in the environment
def minicompile src:ref[AST] env:ref[EnvFrame] => int = {

}

# given an environment, dump the entirety of our output
# to stdout, in whatever destination language we request
def minicompileworld env:ref[EnvFrame] => int = {

}
