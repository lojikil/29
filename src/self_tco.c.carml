# @(#) an attempt at writing a self-tail call detection
# @(#) and optimization system for carML/C in carML
# @(#) itself. This provides two functions:
# @(#)
# @(#) 1. `self-tco?`, which determines if the function is a tail call
# @(#) 1. `rewrite-tco`, which returns a `while` and shadowed variant
# @(#)
# @(#) this is meant to only interact with the carML/C compiler

def self-tco? name:string src:ref[AST] => bool = {
    var res:bool = false
    var idx:int = 0
    var tag:int = 0

    # a little defensive coding, because
    # we're still in C, and ref's can be
    # NULL
    if (eq? src NULL) then
        (return false)
    else
        (set! tag $ -> src tag)

    # just working around a bug in the C output that
    # results from the fact that we're not yet actually
    # tracking types in a useful way...
    match tag with 
        TDEF => (self-tco? name (-> src $ get children 1))
        TFN => (self-tco? name (-> src $ get children 1))
        TCALL => (not (strcmp name (-> src $ -> (get children 0) value)))
        TBEGIN => {
            # actually, thinking about it...
            # we don't really need to loop over all forms, just
            # jump straight to the last form and check if it
            # is a TCO-able form
            set! idx $ - (-> src lenchildren) 1
            self-tco? name (-> src $ get children idx)
        }
        TWHEN => (self-tco? name (-> src $ get children 1))
        TIF => (one-of 
                (self-tco? name (-> src $ get children 1))
                (self-tco? name (-> src $ get children 2)))
        TMATCH => {
            # now HERE we must check each form to see if
            # it is TCO-able. the way that we store TMATCH
            # then-forms is along the spine, so that each
            # form is basically:
            # `(match CONDITION (array (array CASE THEN)))`
            # this allows us to easily store the system, but
            # obviously it also means that we must linearlly
            # traverse the spine... but only need to check
            # the odd indicies of the spine
            set! idx 1

            # as an aside...
            # I often use `{}` pairs in forms just to visually
            # demarcate what I'm doing, not for any other reason

            while (< idx $ -> src lenchildren) do {
                if (self-tco? name $ -> src $ get children idx) then
                    (return true)
                else
                    (set! idx $ + idx 2)
            }

            false
        }
        else => false
    end
}

# create a shadowed TIDENT, so that we can use this in
# AST generation code itself...
def shadow-ident src:ref[AST] => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret tag) TIDENT
    set! (-> ret lenchildren) 0
    set! (-> ret value) $ shadow-name $ -> src value
    ret
}

def make-set-bang ident:ref[AST] value:ref[AST] => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    var setident : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> setident tag) TIDENT
    set! (-> setident value) (hmalloc $ * 5 $ sizeof char)
    stpncpy (-> setident value) "set!" 5
    set! (-> ret tag) TCALL
    set! (-> ret lenchildren) 3
    set! (-> ret children) $ hmalloc $ * 3 $ sizeof ref[AST]
    set! (get (-> ret children) 0) setident
    set! (get (-> ret children) 1) ident
    set! (get (-> ret children) 2) value
    ret
}

# create the actual shadowed callsite; this should actually
# return a TBEGIN, which can either be grafted into the current
# TBEGIN, or used as a replacement for the TCALL that was in the
# original AST
def shadow-params src:ref[AST] impl:ref[AST] => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    val clen: int = (* (- (-> src lenchildren) 1) 2)
    val ilen: int = (-> impl lenchildren)
    var idx : int = 0
    var sidx : int = 1
    var base : int = 0
    var shadow : ref[AST] = nil
    var param : ref[AST] = nil
    var result: ref[AST] = nil
    set! (-> ret tag) TBEGIN
    set! (-> ret lenchildren) clen
    set! (-> ret children) $ hmalloc $ * clen $ sizeof ref[AST]
    # NOTE again! this would be a great place for a nice map/foreach/whatever
    # fusion system. What we need to do is basically:
    # `zip src $ map (compose shadow-name get-param-name) impl`
    # so that we end up with an array of tuples for `(shadowed-name value)`
    # and then do the same for shadow-names and param-names. a nice foreach
    # would be useful to iterate over both...
    #
    # also, it would be interesting to have a compose function that did nothing
    # but compose things in a useful way, like `.$.` or the like...
    #
    # the more I think about `.$.` syntax or the like the more I like it...
    # think about it...
    #
    # Inline: `(List.Map foo .$. bar arr)` => `(List.Map (fn (x) (foo (bar x))) arr)`
    # Explicit: `(List.Map (.$. foo bar baz bla) arr)` =>
    # `(List.Map (fn (x) (foo $ bar $ baz $ bla x)) arr)`
    #
    # the `.$.` doesn't have to create an implicit closure, but for purposes it treats
    # the two functions as methods that need to be composed...
    # $> maybe?
    while (< idx ilen) do {
        # woof, really need to decompose this. Let's break it down:
        # 1. create the shadowed ident
        # 1. grab the parameter's value
        # 1. create the shadow set `(set! shadowed-name parameter value)`
        set! param $ get-parameter-ident impl idx
        set! shadow $ shadow-ident param
        set! result $ get (-> src children) sidx
        set! (get (-> ret children) idx) $ make-set-bang shadow result
        set! idx $ + idx 1
        set! sidx $ + sidx 1
    }

    set! base idx
    set! idx 0

    # 1. create the join set `(set! original-name shadowed-name)`
    while (< idx ilen) do {
        set! param $ get-parameter-ident impl idx
        set! shadow $ shadow-ident param
        set! (get (-> ret children) $ + idx base) $ make-set-bang param shadow
        set! idx $ + idx 1
    }
    ret
}

# NOTE: the below three functions are just utilities to make writing
# things slightly more nice, but it really feels like they could
# easily be inlined a bunch opportunistically... I need to read more
# about what OCaml is doing in flambda for their heuristics. There's
# some literal number (like 30) where if the function has less than
# this numer of operations, it is just inlined.
#
# - https://caml.inria.fr/pub/docs/manual-ocaml/flambda.html
# - https://github.com/OCamlPro/flambda-task-force/issues/103
# - https://ocaml.janestreet.com/ocaml-core/flambda_manual/
#
def shadow-name name:string => string = {
    var ret : array[char] = (hmalloc $ + 3 $ * (sizeof char) (strlen name))
    stpcpy ret name
    strcat ret "_sh"
    ret
}

def get-parameter-name src:ref[AST] idx:int => string = {
    val ret:ref[AST] = nil
    when (< idx $ -> src lenchildren) do {
        # XXX *wow* talk about something that would be
        # much nicer with lenses... or really a monadic
        # interface with not-null and some other stuff...
        # part of the other problem here is that we don't
        # have a nicely defined AST interface, I went with
        # a fairly generic interface (so as to only have
        # one structure definition...) that means we do
        # a lot of children indexing...
        set! ret $ -> src $ get children idx
        set! ret $ -> ret $ get children 0
        return $ -> ret value
    }
    ""
}

def get-parameter-ident src:ref[AST] idx:int => ref[AST] = {
    val ret:ref[AST] = nil
    when (< idx $ -> src lenchildren) do {
        set! ret $ -> src $ get children idx
        return $ -> ret $ get children 0
    }
    nil
}

def get-parameter-type src:ref[AST] idx:int => ref[AST] = {
    val ret:ref[AST] = nil
    when (< idx $ -> src lenchildren) do {
        set! ret $ -> src $ get children idx
        return $ -> ret $ get children 1
    }
    nil
}

# `define-shadow-params` actually builds the `var` forms we need
# to shadow parameters; additionally, it merges the var/val forms
# from the target function to the current one, if any
def define-shadow-params src:ref[AST] body:ref[AST] => ref[AST] = {
    # the more I code these, the more I really want to
    # make the simple compiler...
    # esp to track accessors.
    # oh... wait that's a good idea. I can write a simple
    # compiler in carML right now, much like these...
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    var tmp : ref[AST] = nil
    var vbuf : array[ref[AST]] = (make-array ref[AST] 64 nil)
    var idx : int = 0
    var cidx : int = 0
    var capacity : int = 64
    var length : int = 0
    set! (-> ret tag) TBEGIN
    set! (-> ret lenchildren) (-> src lenchildren)
    set! (-> ret children) (hmalloc $ * (-> src lenchildren) (sizeof ref[ref[AST]]))
    # this would be an ideal location for `Array.map`: we need to
    # iterate over each member of the `src` member, and transform
    # it from a `parameter-definition` into a `var` and tweak the
    # name a little...
    while (< idx $ -> src lenchildren) do {
        set! tmp $ hmalloc $ sizeof AST
        set! (-> tmp tag) TVAR
        # so a TVAR is:
        # _value : string = name
        # _2: ref[AST] = value
        # _3: ref[AST] = type
        #
        # would also be a great place for `String.Join`
        set! (-> tmp lenchildren) 2
        set! (-> tmp value) $ shadow-name $ get-parameter-name src idx
        set! (-> tmp children) $ hmalloc $ * 2 $ sizeof ref[AST]
        set! (-> tmp $ get children 0) $ get-parameter-ident src idx
        set! (-> tmp $ get children 1) $ get-parameter-type src idx
        #set! (-> ret $ get children idx) tmp
        set! (get vbuf idx) tmp
        set! idx $ + idx 1
    }
    set! length idx
    set! idx 0
    # NOTE: an idea: instead of doing this *and then* merging the
    # vars/vals in the function body, why don't we handle those in
    # here, basically setup the prelude for the entire restructured
    # function
    while (< idx $ -> body lenchildren) do {
        # NOTE: we are iterating all the way through the body, we could
        # end up picking up other variables we didn't mean to...
        set! tmp (-> body $ get children idx)
        when (one-of (eq? (-> tmp tag) TVAR) (eq? (-> tmp tag) TVAL)) do {
            set! (get vbuf length) tmp
            set! length $ + length 1
        }
        set! idx $ + idx 1
    }

    # penultimate step: shrink the array into a hmalloc'd version
    set! idx 0
    set! (-> ret lenchildren) $ + length 1
    set! (-> ret children) (hmalloc $ * (+ length 1) $ sizeof ref[ref[AST]])
    while (< idx length) do {
        set! (-> ret $ get children idx) (get vbuf idx)
        set! idx $ + idx 1
    }

    # last step: add the `while` loop
    # NOTE: this will have to change if we make the leap to loop invariant
    # motion; for example, we currently generate a `while(1) ...` loop, but
    # we could have some decent motion there if we do some simple analysis:
    #
    #    while true do {
    #        if (< x 0) then
    #            (return y)
    #        else
    #            (shadow-params ...)
    #    }
    #
    # could instead become...
    #
    #    while (>= x 0) do {
    #        (shadow-params ...)
    #    }
    #    return y
    #
    # we just need to check which branch we're actually using for the
    # loop invariant motion really, and negate if it's the `else` arm...
    # this also can only _really_ work when `if` is the last form, or
    # if something like a `when` is used to shortcut the loop...

    set! tmp (hmalloc $ sizeof AST)
    set! (-> tmp tag) TWHILE
    set! (-> tmp lenchildren) 2
    set! (-> tmp children) (hmalloc $ * 2 $ sizeof ref[AST])
    set! (get (-> ret children) length) tmp

    ret 
}

# merge the source's `val` or `var` declarations into the
# destination's body
#def merge-while-variable! src:ref[AST] dst:ref[AST] = {
    # again, another issue: src needs to be the *begin*
    # member of the function, otherwise this won't work
    # and we'll need to test further...
#    var idx:int = 0
#    var ret:array[ref[AST]] = (make-array ref[AST] 128 nil)
    # NOTE this too would be a great place for:
    # 1. fusion: map fx (filter fy $ _children src)
    # 1. better data structures, namely a deque
    #
    # basically, this TCO section that we're working on
    # should form the basis of making carML waaaaay more
    # functional. I think that SRFI-17 and SRFI-9/57-style
    # lenses with StandardML style accessors will be super
    # useful... esp since we will treat all product types
    # equally (records are ADTs are tuples for accessors)
    #
    # THANKS I HATE THIS LINE:
#    while (every (< idx $ -> src lenchildren) (one-of (eq? (-> tmp tag) TVAR) (eq? (-> tmp tag TVAL)))) do {
        # NOTE this also made me realize: we will clober shadowed variables
        # here. We *probably* need to detect that situation, and adjust for
        # it, so as to not introduce any semantic differences when something
        # is compiled as with TCO
#        set! (get ret idx) $ get (-> src children) idx
#        set! idx $ + idx 1
#    }
#}

def make-ident src:string => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret lenchildren) 0
    set! (-> ret tag) TIDENT
    set! (-> ret value) $ hstrdup src
    ret
}

def make-boolean original-value:int => ref[AST] = {
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    set! (-> ret lenchildren) 0
    set! (-> ret children) nil
    if (eq? original-value 0) then
        (set! (-> ret tag) TFALSE)
    else
        (set! (-> ret tag) TTRUE)
    ret
}

# is this a simple type we can just
# return nicely?
def simple-type? src:int => bool = {
    # NOTE should TTAG be here?
    (one-of
        (eq? src TIDENT)
        (eq? src TSTRING)
        (eq? src TINT)
        (eq? src TFLOAT)
        (eq? src TARRAYLITERAL)
        (eq? src TCHAR)
        (eq? src TBOOL)
        (eq? src TTRUE)
        (eq? src TFALSE)
        (eq? src THEX)
        (eq? src TOCT)
        (eq? src TBIN))
}

# copy the body whilst simultaneously rewriting any
# tail calls into a shadow...
# src: the AST to rewrite
# self: the function we're rewriting
# finalp: a boolean signaling if we're in the final position
def copy-body src:ref[AST] self:ref[AST] finalp:bool => ref[AST] = {
    # so here, we need to:
    # 1. walk the spine
    # 1. if we are at the final member:
    #    1. if not a tail call and is a value form, change to a `return`
    #    1. if a tail call, change into a shadow
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    var buf : array[ref[AST]] = (make-array ref[AST] 128 nil)

    # our source & buffer indices
    var sidx : int = 0
    var bidx : int = 0
    val srccap : int = (-> src lenchildren)
    val srctag : int = (-> src tag)

    # NOTE man I would really love accessors & setters here; consider:
    #
    #     set-value! ret $ hstrdup $ _value src
    # OR
    #
    #     (_value ret) := hstrdup $ _value src
    #
    # NOTE I just remembered that I handled the `nil` edgecase
    # in `hstrdup` better than default `strdup`, and besides we
    # should generally use ones managed by the GC
    set! (-> ret value) $ hstrdup $ -> src value

    set! (-> ret tag) (-> src tag)

    # NOTE what do we actually want to do here?
    # we need to iterate over the spine of whatever
    # AST object we have here, and copy it to `buf`,
    # expanding it out under certain conditions.
    # there are also certain things we do *not* need
    # to rewrite. like FOR and WHILE; those we just
    # need to iterate and copy
    # XXX fix this bug finally... originally was
    # `(-> src tag)` but had to replace because C
    # output doesn't work
    match srctag with
        TCALL => {
            # NOTE here we need to call `shadow-params`
            # and then merge the results into the body
            # of the return; we also need to switch the
            # return type to be a `TBEGIN` really
            # we honestly could just return right here
            # and exit early...
            if finalp then {
                return $ shadow-params src self
            } else {
                while (< bidx srccap) do {
                    set! (get buf bidx) (copy-body (get (-> src children) sidx) self false)
                    set! bidx $ + bidx 1
                    set! sidx $ + sidx 1
                }
            }
        }
        _ given (simple-type? srctag) => {
            # for an ident, we either want to just copy it wholesale
            # or turn it into a `(return <source ident>)` for final
            # cases. Since we already copy the other attributes earlier
            # in this procedure, we don't really need to do anything
            # further here in non-final cases
            if finalp then {
                set! (-> ret tag) TCALL
                set! (-> ret lenchildren) 2
                set! (-> ret children) $ hmalloc $ * 2 $ sizeof ref[AST]
                set! (get buf 0) $ make-ident "return"
                set! (get buf 1) $ make-ident $ -> src value
                set! bidx 2
            } else {
                set! (get buf bidx) src
                set! bidx $ + bidx 1
                set! sidx $ + sidx 1
            }
        }
        TMATCH => 1
        TIF => {
            # an `if` form is composed of three members, and the first one,
            # `<cond>`, can never be TCO'd (obviously)
            set! (get buf 0) (copy-body (get (-> src children) 0) self false)
            set! (get buf 1) (copy-body (get (-> src children) 1) self finalp)
            set! (get buf 2) (copy-body (get (-> src children) 2) self finalp)
            set! bidx 3
        }
        TWHEN => {
            # `when` is obviously the same as `if`, just with one less arm
            # NOTE I just realized, until we have loop motion, we need to add
            # an `else` arm to the `if` we generate, because we end up with
            # infinite loops:
            # `def foo x:int = { when (< x 10) do { (foo $ - x 1) } }`
            # this becomes
            # [source, c]
            # ----
            # void
            # foo(int x){
            #     int x_sh = x;
            #     while(true){
            #         if(x < 10) {
            #             x_sh = (x - 1);
            #             x = x_sh;
            #         }
            #     }
            # }
            # ----
            #
            # which obviously does not not terminate
            # so we need to convert `when` to `if` and add a `break` in the
            # `else` arm
            set! (get buf 0) (copy-body (get (-> src children) 0) self false)
            set! (get buf 1) (copy-body (get (-> src children) 1) self finalp)
            set! bidx 2
        }
        TBEGIN => {
            # we need to iterate over all members of the `begin` form, and if
            # we are in the final position of the top level *and* the final
            # member of the `begin`, then we can copy as a TCO
            while (< bidx srccap) do {
                if (every finalp (eq? bidx (- srccap 1))) then {
                    set! (get buf bidx) (copy-body (get (-> src children) sidx) self finalp)
                } else {
                    set! (get buf bidx) (copy-body (get (-> src children) sidx) self false)
                }
                set! bidx $ + bidx 1
                set! sidx $ + sidx 1
            }
        }
        else => {
            while (< bidx srccap) do {
                set! (get buf bidx) (copy-body (get (-> src children) sidx) self false)
                set! bidx $ + bidx 1
                set! sidx $ + sidx 1
            }
        }
    end

    # NOTE here we just need to copy & flatten the buffer
    # results into what we're actually returning...

    set! sidx 0
    set! (-> ret lenchildren) bidx
    set! (-> ret children) (hmalloc $ * bidx $ sizeof ref[AST])

    while (< sidx bidx) do {
        set! (get (-> ret children) sidx) (get buf sidx)
        set! sidx $ + sidx 1
    }

    ret
}

def rewrite-tco src:ref[AST] => ref[AST] = {
    val params : ref[AST] = (define-shadow-params (get (-> src children) 0) (get (-> src children) 1))
    var ret : ref[AST] = (hmalloc $ sizeof AST)
    var body: ref[AST] = (get (-> params children) $ - (-> params lenchildren) 1)

    # what we need to do is effectively copy the spine of the original AST
    # form, and replace certain portions with some shadowing components
    # thrown into the spine. so for example:
    #
    # ```
    # def foo x:int y:int => int = if (> x 10) then y else (foo (+ x 1) (+ x y))
    # # this should become...
    # def foo x:int y:int => int = {
    #     var x_shadow:int = x
    #     var y_shadow:int = y
    #     while true do {
    #         if (> x 10) then
    #           (return y)
    #         else {
    #           set! x_shadow (+ x 1)
    #           set! y_shadow (+ x y)
    #           set! x x_shadow
    #           set! y y_shadow
    #         }
    #   }
    #```
    #
    # this way we can make the tail call into the semantically similar loop
    # and not have to rely on the C/Golang compiler doing it for us...
    #
    # additionally, we need a mechanism by which we know we're rewriting a
    # tail call, rather than just rewriting all calls. So basically we need
    # to follow the following general idea:
    #
    # 1. shadow parameters in definitions
    # 1. walk the spine
    #     1. if not tail, copy the form
    #     1. if tail, rewrite as needed
    #
    # rewriting should do the following:
    #
    # 1. not hop into `while` and `for` bodies
    # 1. rewrite either-side of an `if`, one side of a `when`, &c
    # 1. this rewrite should be: if it is not a tail-call, prefix it with `return`
    # 1. if it *is* a tail call, shadow call
    set! (-> ret tag) TDEF
    set! (-> ret lenchildren) 3 # parameter list, return type, body
    set! (-> ret children) $ hmalloc $ * 3 $ sizeof ref[ref[AST]]

    # XXX should we mung the name here to indicate it has been
    # rewritten? probably not for production/release builds, but
    # maybe for debug?
    set! (-> ret value) (-> src value)

    set! (get (-> ret children) 0) (get (-> src children) 0)
    # I know why I did that; I originally was going to make
    # return types completely optional (for inference)
    set! (get (-> ret children) 2) (get (-> src children) 2)
    set! (get (-> ret children) 1) params

    # we need to call `copy-body` here, with the param list
    # as well as the body

    set! (get (-> body children) 0) $ make-boolean 1
    set! (get (-> body children) 1) $ copy-body (get (-> src children) 1) (get (-> src children) 0) true

    ret
}
