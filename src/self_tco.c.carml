# @(#) an attempt at writing a self-tail call detection
# @(#) and optimization system for carML/C in carML
# @(#) itself. This provides two functions:
# @(#)
# @(#) 1. `self-tco?`, which determines if the function is a tail call
# @(#) 1. `rewrite-tco`, which returns a `while` and shadowed variant
# @(#)
# @(#) this is meant to only interact with the carML/C compiler

def self-tco? name:string src:ref[AST] => bool = {
    var res:bool = false
    var idx:int = 0
    val tag:int = (-> src tag)

    # just working around a bug in the C output that
    # results from the fact that we're not yet actually
    # tracking types in a useful way...
    match tag with 
        TDEF => (self-tco? name (-> src $ get children 1))
        TFN => (self-tco? name (-> src $ get children 1))
        TCALL => (not (strncmp name (-> src $ -> (get children 0) value)))
        TBEGIN => {
            # actually, thinking about it...
            # we don't really need to loop over all forms, just
            # jump straight to the last form and check if it
            # is a TCO-able form
            set! idx $ - (-> src lenchildren) 1
            self-tco? name (-> src $ get children idx)
        }
        TWHEN => (self-tco? name (-> src $ get children 1))
        TIF => (one-of 
                (self-tco? name (-> src $ get children 1))
                (self-tco? name (-> src $ get children 2)))
        TMATCH => {
            # now HERE we must check each form to see if
            # it is TCO-able. the way that we store TMATCH
            # then-forms is along the spine, so that each
            # form is basically:
            # `(match CONDITION (array (array CASE THEN)))`
            # this allows us to easily store the system, but
            # obviously it also means that we must linearlly
            # traverse the spine... but only need to check
            # the odd indicies of the spine
            set! idx 1

            # as an aside...
            # I often use `{}` pairs in forms just to visually
            # demarcate what I'm doing, not for any other reason

            while (< idx $ -> src lenchildren) do {
                if (self-tco? name $ -> src $ get children idx) then
                    true
                else
                    (set! idx $ + idx 2)
            }
        }
        else => false
    end
}

def shadow-params src:ref[AST] => ref[AST] = {
    nil
}

def define-shadow-params src:ref[AST] => ref[AST] = {
    nil
}

def rewrite-tco src:ref[AST] => ref[AST] = {
    nil
}
