# a very simple C-mung implementation
# we have two functions:
#
# - `c_safe_char`, which rewrites characters to ones that are safe for C
# - `cmung`, which simply iterates over one string
#
# I think `c_safe_char` is pretty nice, sans just relying on type inference,
# but `cmung` could be improved:
#
# - a `string.map!` form to handle application
# - generic `map!` form that takes any `Seq` module/type class
#
# or whatever. it's not terrible tho, all things told

def c_safe_char x:char => char = match x with
         '!' => 'B'
         '%' => '_'
         '$' => '_'
         '?' => 'p'
         '<' => 'l'
         '>' => 'g'
         '=' => 'e'
         '@' => '_'
         '^' => '_'
         '&' => '_'
         '|' => '_'
         '*' => '_'
         '.' => '_'
         '+' => '_'
         '-' => '_'
         else => x
    end

def cmung src:string dst:string len:int => string = {
    var idx:int = 0
    while (< idx len) do {
        set! (get dst idx) $ c_safe_char $ get src idx
        set! idx $ + idx 1
    }
    dst
}
